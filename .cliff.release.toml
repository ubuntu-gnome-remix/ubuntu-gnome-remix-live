[changelog]
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% for group, commits in commits | group_by(attribute="group") %}
  ## {{ group | striptags | trim | upper_first }}
  {% for commit in commits %}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }}\
  {% endfor %}
{% endfor %}
"""
# remove the leading and trailing s
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat",                                group = "<!-- 0 -->🚀 Features" },
  { message = "^fix|^bugfix|^hotfix",                 group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^refactor",                            group = "<!-- 2 -->🚜 Refactor" },
  { message = "^doc.*update changelogs & version.*",  group = "<!-- 3 -->📚 Documentation", skip = true },
  { message = "^doc",                                 group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf",                                group = "<!-- 4 -->⚡ Performance" },
  { message = "^style",                               group = "<!-- 5 -->🎨 Styling" },
  { message = "^test",                                group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore|^ci",                           group = "<!-- 7 -->⚙️ Miscellaneous Tasks", skip = true },
  { body = ".*security",                              group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert",                              group = "<!-- 9 -->◀️ Revert" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)",               skip = true },
  { message = "^chore\\(pr\\)",                   skip = true },
  { message = "^chore\\(pull\\)",                 skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
limit_commits = 100000
